"""
Flask API server pro √ö≈ôedn√≠ deska chatbot.

Poskytuje REST API endpoints pro React frontend s podporou:
- Chat komunikace s AI
- Spr√°va dokument≈Ø
- Monitoring stavu syst√©mu
"""

import sys
from datetime import datetime
from typing import Dict, Any, Optional

from flask import Flask, request, jsonify
from flask_cors import CORS

# Import hlavn√≠ch komponent
sys.path.append('.')
from main import SimpleVectorStore, ChatbotRAG

# Flask aplikace
app = Flask(__name__)
CORS(app)

# Glob√°ln√≠ komponenty syst√©mu
vector_store: Optional[SimpleVectorStore] = None
chatbot: Optional[ChatbotRAG] = None

def initialize_system() -> bool:
    """
    Inicializuje chatbot syst√©m se v≈°emi komponenty.
    
    Returns:
        bool: True p≈ôi √∫spƒõchu, False p≈ôi chybƒõ
    """
    global vector_store, chatbot
    
    print("Inicializuji chatbot syst√©m...")
    
    try:
        # Naƒçten√≠ vektorov√©ho √∫lo≈æi≈°tƒõ
        vector_store = SimpleVectorStore()
        vector_store.load()
        
        # Inicializace chatbota s AI modelem
        chatbot = ChatbotRAG(vector_store, model="gemma3:4b")
        
        print("‚úì Syst√©m √∫spƒõ≈°nƒõ inicializov√°n")
        return True
    except Exception as e:
        print(f"‚úó Chyba p≈ôi inicializaci: {e}")
        return False

def _check_ollama_connection() -> bool:
    """Zkontroluje p≈ôipojen√≠ k Ollama serveru."""
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        return response.status_code == 200
    except:
        return False

def _get_last_update() -> Optional[str]:
    """Najde datum nejnovƒõj≈°√≠ aktualizace dokument≈Ø."""
    if not vector_store or not vector_store.documents:
        return None
    
    dates = [doc.get('processed_at', '') for doc in vector_store.documents if doc.get('processed_at')]
    return max(dates) if dates else None

@app.route('/api/status', methods=['GET'])
def get_status():
    """
    Vrac√≠ aktu√°ln√≠ stav syst√©mu.
    
    Returns:
        JSON response se statistikami syst√©mu
    """
    try:
        # Kontrola Ollama p≈ôipojen√≠
        ollama_connected = _check_ollama_connection()
        
        # Statistiky dokument≈Ø
        documents_count = len(vector_store.documents) if vector_store else 0
        
        # Nejnovƒõj≈°√≠ aktualizace
        last_update = _get_last_update()
        
        return jsonify({
            'documentsCount': documents_count,
            'lastUpdate': last_update,
            'ollamaConnected': ollama_connected,
            'systemReady': chatbot is not None
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/documents', methods=['GET'])
def get_documents():
    """
    Vrac√≠ seznam v≈°ech dostupn√Ωch dokument≈Ø.
    
    Returns:
        JSON array s metadaty dokument≈Ø
    """
    try:
        if not vector_store or not vector_store.documents:
            return jsonify([])
        
        # Sestaven√≠ p≈ôehledu dokument≈Ø
        documents = [
            {
                'title': doc.get('title', 'Dokument bez n√°zvu'),
                'municipality': doc.get('municipality', 'Nezn√°m√° obec'),
                'processed_at': doc.get('processed_at', ''),
                'doc_id': doc.get('doc_id', ''),
                'original_url': doc.get('original_url', '')
            }
            for doc in vector_store.documents
        ]
        
        return jsonify(documents)
    except Exception as e:
        print(f"Chyba p≈ôi naƒç√≠t√°n√≠ dokument≈Ø: {e}")
        return jsonify({'error': 'Chyba p≈ôi naƒç√≠t√°n√≠ dokument≈Ø'}), 500

@app.route('/api/chat', methods=['POST'])
def chat():
    """
    Hlavn√≠ endpoint pro chat komunikaci s AI.
    
    Oƒçek√°v√° JSON s polem 'message' obsahuj√≠c√≠ u≈æivatelsk√Ω dotaz.
    """
    try:
        # Validace vstupu
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({'error': 'Chyb√≠ pole "message" v JSON'}), 400
        
        user_message = data['message'].strip()
        if not user_message:
            return jsonify({'error': 'Zpr√°va nesm√≠ b√Ωt pr√°zdn√°'}), 400
        
        # Kontrola stavu syst√©mu
        if not chatbot:
            return jsonify({
                'error': 'AI syst√©m nen√≠ dostupn√Ω. Zkuste to pozdƒõji.',
                'status': 'not_ready'
            }), 503
        
        # Generov√°n√≠ odpovƒõdi
        response = chatbot.generate_response(user_message)
        
        # Z√≠skej zdroje z posledn√≠ konverzace
        sources = []
        if chatbot.conversation_history:
            last_conv = chatbot.conversation_history[-1]
            sources = last_conv.get('sources', [])
        
        return jsonify({
            'response': response,
            'sources': sources,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"Chyba v chat endpointu: {e}")
        return jsonify({
            'error': f'Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠: {str(e)}'
        }), 500

@app.route('/api/refresh-data', methods=['POST'])
def refresh_data():
    """Obnov√≠ data ze zdroj≈Ø"""
    try:
        # Toto by mohlo spustit nov√Ω sbƒõr dat
        # Pro teƒè jen p≈ôenaƒçteme existuj√≠c√≠ data
        if vector_store:
            vector_store.load()
        
        return jsonify({
            'message': 'Data byla obnovena',
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'system_ready': chatbot is not None
    })

@app.route('/', methods=['GET'])
def root():
    """Root endpoint - informace o API"""
    return jsonify({
        'name': '√ö≈ôedn√≠ Deska Chatbot API',
        'version': '1.0.0',
        'endpoints': {
            '/api/status': 'GET - Stav syst√©mu',
            '/api/documents': 'GET - Seznam dokument≈Ø', 
            '/api/chat': 'POST - Chat s botem',
            '/api/health': 'GET - Health check',
            '/api/refresh-data': 'POST - Obnoven√≠ dat'
        }
    })

if __name__ == '__main__':
    print("=" * 60)
    print("√ö≈òEDN√ç DESKA CHATBOT - API SERVER")
    print("=" * 60)
    
    # Inicializuj syst√©m p≈ôi startu
    print("Inicializuji chatbot syst√©m...")
    success = initialize_system()
    
    if not success:
        print("‚ö† Syst√©m se neinicializoval √∫plnƒõ, ale server se spust√≠")
        print("  Ujistƒõte se, ≈æe m√°te spu≈°tƒõnou Ollama a naƒçten√° data")
    
    print(f"\nüöÄ Spou≈°t√≠m API server na http://localhost:5000")
    print("üì± React frontend spus≈•te: cd frontend && npm start")
    print("\nDostupn√© endpoints:")
    print("  GET  /api/status      - Stav syst√©mu")
    print("  GET  /api/documents   - Seznam dokument≈Ø")  
    print("  POST /api/chat        - Chat s botem")
    print("  GET  /api/health      - Health check")
    print("\n" + "=" * 60)
    
    app.run(debug=True, host='0.0.0.0', port=5000)